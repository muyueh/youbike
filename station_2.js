// Generated by LiveScript 1.2.0
var each, w, h, mapOffset, styleName, zoomLevel, colorscheme, flash, overlayGoog;
each = require("prelude-ls").each;
w = 1280;
h = 700;
mapOffset = 4000;
styleName = "subtle";
zoomLevel = {
  20: 1128.497220,
  19: 2256.994440,
  18: 4513.988880,
  17: 9027.977761,
  16: 18055.955520,
  15: 36111.911040,
  14: 72223.822090,
  13: 144447.644200,
  12: 288895.288400,
  11: 577790.576700,
  10: 1155581.153000,
  9: 2311162.307000,
  8: 4622324.614000,
  7: 9244649.227000,
  6: 18489298.450000,
  5: 36978596.910000,
  4: 73957193.820000,
  3: 147914387.600000,
  2: 295828775.300000,
  1: 591657550.500000
};
colorscheme = "RdYlGn";
flash = function(){
  return d3.selectAll(".vcircle").transition().delay(function(d, i){
    return i * 5;
  }).style({
    "fill": function(){
      return colorbrewer[colorscheme]["3"][~~(Math.random() * 3)];
    }
  });
};
setInterval(function(){
  return flash();
}, 3000);
overlayGoog = new google.maps.OverlayView();
d3.json("./mapstyle/" + styleName + ".json", function(err, mapStyle){
  var map, zoomTest, zoomText;
  mapStyle = new google.maps.StyledMapType(mapStyle, {
    name: styleName
  });
  d3.select('#map').style("width", w + "px").style("height", h + "px").style("margin", "0px").style("padding", "0px");
  map = new google.maps.Map(d3.select('#map').node(), {
    zoom: 13,
    center: new google.maps.LatLng(25.043897602152036, 121.5321110748291),
    mapTypeControlOptions: {
      mapTypeId: [google.maps.MapTypeId.ROADMAP, 'map_style']
    }
  });
  zoomTest = function(zoom){
    if (zoom >= 15) {
      return 1;
    } else {
      return 0;
    }
  };
  zoomText = function(zoom){
    return d3.select(".gPrints").selectAll("text").transition().style({
      "opacity": zoomTest(zoom)
    });
  };
  google.maps.event.addListener(map, "bounds_changed", function(){
    var bounds, northEast, southWest;
    bounds = this.getBounds();
    northEast = bounds.getNorthEast();
    southWest = bounds.getSouthWest();
    return zoomText(this.zoom);
  });
  map.mapTypes.set('map_style', mapStyle);
  map.setMapTypeId('map_style');
  return d3.tsv("./stations.tsv", function(err, stationsTsv){
    stationsTsv.filter(function(d, i){
      ["lat", "lng", "n_space"].map(function(it){
        return d[it] = +d[it];
      });
      return true;
    });
    overlayGoog.onAdd = function(){
      var layer, svg, gPrints, gv;
      layer = d3.select(this.getPanes().overlayLayer).append("div").attr("class", "svgOverlay");
      svg = layer.append("svg");
      gPrints = svg.append("g").attr("class", "gPrints");
      svg.attr("width", mapOffset * 2).attr("height", mapOffset * 2).style("position", "absolute").style("top", -1 * mapOffset).style("left", -1 * mapOffset);
      gv = svg.append("g").attr("class", "gv");
      return overlayGoog.draw = function(){
        var overlayProjection, googleMapProjection, projecting, current_zoom, setcircle, settext, setclipPath, c, t, cp, b, voronoi, setvoronoi, pv;
        overlayProjection = this.getProjection();
        googleMapProjection = function(coordinates){
          var googleCoordinates, pixelCoordinates;
          googleCoordinates = new google.maps.LatLng(coordinates[1], coordinates[0]);
          pixelCoordinates = overlayProjection.fromLatLngToDivPixel(googleCoordinates);
          return [pixelCoordinates.x + mapOffset, pixelCoordinates.y + mapOffset];
        };
        projecting = d3.geo.path().projection(googleMapProjection);
        stationsTsv.filter(function(it){
          var coor;
          coor = googleMapProjection([it.lng, it.lat]);
          it.coorx = coor[0];
          it.coory = coor[1];
          return true;
        });
        current_zoom = this.map.zoom;
        googleMapProjection([10, 11]);
        console.log;
        setcircle = function(it){
          return it.attr({
            "cx": function(it){
              return it.coorx;
            },
            "cy": function(it){
              return it.coory;
            },
            "r": function(){
              return 3;
            }
          }).style({
            "fill": "orange",
            "opacity": 0.9
          });
        };
        settext = function(it){
          return it.attr({
            "x": function(it){
              return it.coorx;
            },
            "y": function(it){
              return it.coory;
            }
          }).style({
            "opacity": zoomTest(current_zoom)
          });
        };
        setclipPath = function(it){
          return it.attr({
            "cx": function(it){
              return it.coorx;
            },
            "cy": function(it){
              return it.coory;
            },
            "r": function(){
              return zoomLevel[20 - current_zoom] / 1000000 * 3;
            }
          });
        };
        c = gPrints.selectAll("circle").data(stationsTsv);
        c.transition().call(setcircle);
        c.enter().append("circle").call(setcircle);
        t = gPrints.selectAll("text").data(stationsTsv);
        t.enter().append("text").text(function(it){
          return it["station name"];
        }).call(settext);
        t.call(settext);
        cp = gPrints.selectAll(".clipPath").data(stationsTsv);
        cp.selectAll("circle").call(setclipPath);
        cp.enter().append("clipPath").attr({
          "id": function(it, i){
            return "clip-" + i;
          },
          "class": "clipPath"
        }).append("circle").call(setclipPath);
        b = mapOffset / 2;
        voronoi = d3.geom.voronoi().clipExtent([[mapOffset - b, 0 + mapOffset - b], [w + mapOffset + b, h + mapOffset + b]]).x(function(it){
          return it.coorx;
        }).y(function(it){
          return it.coory;
        });
        setvoronoi = function(it){
          return it.attr({
            "d": function(it){
              return "M" + it.join(",") + "Z";
            }
          }).style({
            "stroke": "white",
            "stroke-width": 2,
            "fill": "white",
            "opacity": 0.6
          });
        };
        pv = gv.selectAll("path").data(voronoi(stationsTsv));
        pv.enter().append("path").call(setvoronoi).attr({
          "id": function(it, i){
            return "path-" + i;
          },
          "class": "vcircle",
          "clip-path": function(it, i){
            return "url(#clip-" + i + ")";
          }
        });
        return pv.transition().call(setvoronoi);
      };
    };
    return overlayGoog.setMap(map);
  });
});