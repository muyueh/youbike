// Generated by LiveScript 1.2.0
var ref$, each, listsToObj, sttHdr, sttTwo, ggl, overlayGoog;
ref$ = require("prelude-ls"), each = ref$.each, listsToObj = ref$.listsToObj;
sttHdr = ["district", "stationname", "address", "n_space", "lng", "lat", "goodstationname"];
sttTwo = ["中正區	臺北市客家文化主題公園	師大路/汀州路交叉口	32	121.525322	25.02043	臺北市客家文化主題公園", "大安區	捷運台電大樓站(2號出口)	羅斯福路/辛亥路交叉口(古亭國小前)	40	121.528552	25.020547	捷運台電大樓站(2號出口)"];
sttTwo = sttTwo.map(function(it){
  return listsToObj(sttHdr, it.split("\t"));
}).filter(function(d, i){
  return ["lat", "lng", "n_space"].map(function(it){
    return d[it] = +d[it];
  });
});
ggl = {};
ggl.mpw = 1300;
ggl.mph = 800;
ggl.mapOffset = 4000;
ggl.styleName = "paper_light";
overlayGoog = new google.maps.OverlayView();
d3.json("../mapstyle/" + ggl.styleName + ".json", function(err, mapStyle){
  var map, addOverlay;
  mapStyle = new google.maps.StyledMapType(mapStyle, {
    name: ggl.styleName
  });
  d3.select('#map').style("width", ggl.mpw + "px").style("height", ggl.mph + "px").style("margin", "0px").style("padding", "0px");
  map = new google.maps.Map(d3.select('#map').node(), {
    zoom: 15,
    center: new google.maps.LatLng(25.012476274167252, 121.53414687147142),
    mapTypeControlOptions: {
      mapTypeId: [google.maps.MapTypeId.ROADMAP, 'map_style']
    }
  });
  google.maps.event.addListener(map, "bounds_changed", function(){
    var bounds, northEast, southWest;
    bounds = this.getBounds();
    northEast = bounds.getNorthEast();
    southWest = bounds.getSouthWest();
    return console.log([(southWest.lng() + northEast.lng()) / 2, (southWest.lat() + northEast.lat()) / 2]);
  });
  map.mapTypes.set('map_style', mapStyle);
  map.setMapTypeId('map_style');
  addOverlay = function(stations){
    overlayGoog.onAdd = function(){
      var layer, svg, gv, gPrints;
      layer = d3.select(this.getPanes().overlayMouseTarget).append("div");
      svg = layer.append("svg");
      gv = svg.append("g").attr("class", "gv");
      gPrints = svg.append("g").attr("class", "gPrints");
      svg.attr("width", ggl.mapOffset * 2).attr("height", ggl.mapOffset * 2).style("position", "absolute").style("top", -1 * ggl.mapOffset).style("left", -1 * ggl.mapOffset);
      return overlayGoog.draw = function(){
        var overlayProjection, googleMapProjection, projecting, current_zoom, setcircle, settext, setclipPath, cp, b, voronoi, setvoronoi, pv, c;
        overlayProjection = this.getProjection();
        googleMapProjection = function(coordinates){
          var googleCoordinates, pixelCoordinates;
          googleCoordinates = new google.maps.LatLng(coordinates[1], coordinates[0]);
          pixelCoordinates = overlayProjection.fromLatLngToDivPixel(googleCoordinates);
          return [pixelCoordinates.x + ggl.mapOffset, pixelCoordinates.y + ggl.mapOffset];
        };
        projecting = d3.geo.path().projection(googleMapProjection);
        stations.filter(function(it){
          var coor;
          coor = googleMapProjection([it.lng, it.lat]);
          it.coorx = coor[0];
          it.coory = coor[1];
          return true;
        });
        current_zoom = this.map.zoom;
        setcircle = function(it){
          return it.attr({
            "cx": function(it){
              return it.coorx;
            },
            "cy": function(it){
              return it.coory;
            },
            "r": function(){
              return 0;
            },
            "class": "stationdots"
          }).style({
            fill: "white",
            stroke: "rgb(252, 78, 42)",
            strokeWidth: "5px"
          }).transition().attr({
            "r": function(){
              return 50;
            }
          }).transition().attr({
            "r": function(){
              return 10;
            }
          });
        };
        settext = function(it){
          return it.attr({
            "x": function(it, i){
              return it.coorx + (i === 0 ? -400 : 50);
            },
            "y": function(it){
              return it.coory - 100;
            }
          }).style({
            "font-size": "30px"
          });
        };
        setclipPath = function(it){
          return it.attr({
            "cx": function(it){
              return it.coorx;
            },
            "cy": function(it){
              return it.coory;
            },
            "r": function(){
              return 150;
            }
          });
        };
        cp = gPrints.selectAll(".clipPath").data(stations);
        cp.selectAll("circle").call(setclipPath);
        cp.enter().append("clipPath").attr({
          "id": function(it, i){
            return "clip-" + i;
          },
          "class": "clipPath"
        }).append("circle").call(setclipPath);
        b = ggl.mapOffset / 2;
        voronoi = d3.geom.voronoi().clipExtent([[ggl.mapOffset - b, 0 + ggl.mapOffset - b], [ggl.mpw + ggl.mapOffset + b, ggl.mph + ggl.mapOffset + b]]).x(function(it){
          return it.coorx;
        }).y(function(it){
          return it.coory;
        });
        setvoronoi = function(it){
          return it.attr({
            "d": function(it){
              return "M" + it.join(",") + "Z";
            }
          }).style({
            "stroke": "white",
            "stroke-width": 2,
            "fill": "orange",
            "opacity": 0.1
          });
        };
        pv = gv.selectAll("path").data(voronoi(stations));
        pv.enter().append("path").call(setvoronoi).attr({
          "id": function(it, i){
            return "path-" + i;
          },
          "class": "vcircle",
          "clip-path": function(it, i){
            return "url(#clip-" + i + ")";
          }
        }).on("mouseenter", function(){
          return d3.select(this).transition().style({
            "opacity": 0.8
          });
        }).on("mouseleave", function(){
          return d3.select(this).transition().style({
            "opacity": 0.1
          });
        });
        pv.transition().call(setvoronoi);
        c = gPrints.selectAll(".stationdots").data(stations);
        c.transition().call(setcircle);
        return c.enter().append("circle").call(setcircle);
      };
    };
    return overlayGoog.setMap(map);
  };
  return addOverlay(sttTwo);
});